#+title: Doom Emacs Config

* UI Settings 
These need to be loaded first before the GUI starts
** Splash Image 
#+begin_src emacs-lisp :tangle config.el 
 ;;(setq fancy-splash-image
       ;;(concat doom-private-dir "splash/doom-emacs-dark.svg"))
       ;;(concat doom-private-dir "splash/doomEmacsDoomOne.svg"))
       ;;(concat doom-private-dir "splash/doomEmacsGruvbox.svg"))
       ;;(concat doom-private-dir "splash/emacs.svg"))
       ;;(concat doom-private-dir "splash/doom-emacs-cute.svg"))


(let ((alternatives '(
                      "doom-emacs-cute.svg"
                      "doom-emacs-white.svg"
                      "doomEmacsDoomOne.svg"
                      "doomEmacsGruvbox.svg"
                      "doomEmacsTokyoNight2.svg"
                      )))
  (setq fancy-splash-image
        (concat doom-private-dir "splash/"
                (nth (random (length alternatives)) alternatives))))
#+end_src

** Transparency 
#+begin_src emacs-lisp :tangle config.el 
(set-frame-parameter (selected-frame) 'alpha-background 95)
(add-to-list 'default-frame-alist '(alpha-background . 95))
(set-frame-parameter (selected-frame) 'alpha 95)
(add-to-list 'default-frame-alist '(alpha . 95))
;; Troubleshooting: 
;;(set-face-background 'default 'unspecified) 
(setq menu-bar-mode t)
#+end_src

** Theme and Font
#+begin_src emacs-lisp :tangle config.el
;; ;; ---- Generated by stylix ----
;; (require 'base16-stylix-theme)
;; (setq base16-theme-256-color-source 'colors)
;; (load-theme 'base16-stylix t)
;;(load-theme 'doom-gruvbox t)
;;(add load path! "~/.config/custom-doom/custom_theme.el")
;;(setq doom-font (font-spec :family "Terminess Nerd Font" :size 15))
(setq doom-font (font-spec :family "Terminess Nerd Font" :size 15))
(load  "~/.config/custom-doom/theme/theme.el")
;;(load-theme 'doom-ayu-mirage t)
#+end_src

** Animations
#+begin_src emacs-lisp :tangle config.el
(load "~/.config/custom-doom/holo.el")
(load "~/.config/custom-doom/animation-macplugin.el")
#+end_src

* Editor Settings
** Tabs
#+begin_src emacs-lisp :tangle config.el
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
(setq indent-line-function 'insert-tab)
#+end_src

* Org Mode Extensions
#+begin_src emacs-lisp :tangle config.el
(use-package! org-modern
  :config
  (add-hook 'org-mode-hook #'org-modern-mode)
  (add-hook 'org-mode-hook #'org-indent-mode))

;;(use-package! org-xournalpp
;; :config
;;  (add-hook 'org-mode-hook #'org-xournalpp-mode))

(use-package! org-xopp
  :config
  (org-xopp-setup))

(add-to-list 'exec-path "/run/current-system/sw/bin/")
(add-to-list 'exec-path "/Users/david/.nix-profile/bin")

;; Set reusable font name variables
(defvar my/fixed-width-font "JetBrains Mono Nerd Font"
  "The font to use for monospaced (fixed width) text.")

;;(defvar my/variable-width-font "Iosevka Aile"
(defvar my/variable-width-font "Latin Modern Sans"
  "The font to use for variable-pitch (document) text.")

;; NOTE: These settings might not be ideal for your machine, tweak them as needed!
(set-face-attribute 'default nil :font my/fixed-width-font :weight 'light :height 180)
(set-face-attribute 'fixed-pitch nil :font my/fixed-width-font :weight 'light :height 190)
(set-face-attribute 'variable-pitch nil :font my/variable-width-font :weight 'light :height 1.3)


;;(use-package! org-krita
;;  :config
;;  (add-hook 'org-mode-hook #'org-krita-mode))

;;(after! org-krita
;;  (add-to-list 'exec-path "/Applications/Krita.app/Contents/MacOS")

;;  (defun my/org-krita-make-new-image (output-kra-path &optional width height)
;;    "Create a new image based on a template at OUTPUT-KRA-PATH."
;;    (let ((template (org-krita-resource "~/.config/krita/template.kra")))
      ;; TODO: Change image width and height based on provided argument
 ;;     (f-copy template output-kra-path)
 ;;     (set-file-modes output-kra-path #o644)))) ;; change permissions

;;(advice-add 'org-krita-make-new-image :override ;;#'my/org-krita-make-new-image)

(with-eval-after-load 'org-xournalpp
  (setq org-xournalpp-template-getter
        (lambda ()
          "~/git/nix-config/dotfiles/config/xournalpp/blackboard.xopp")))

(add-to-list 'exec-path "/Applications/Xournal++.app/Contents/MacOS")

(use-package! org-yt)

(use-package! org-excalidraw
  :config
  (org-excalidraw-directory "~/Nextcloud/Excalidraw"))

(use-package! org-tree-slide
  :custom
  (org-image-actual-width nil))

(setq ob-mermaid-cli-path "/opt/homebrew/bin/mmdc --puppeteerConfigFile ~/.config/puppeteer/puppeteerConfig.json")
;; setting brave as the chromium puppeteer
;; (setq ob-mermaid-cli-path "/run/current-system/sw/bin/mmdc --puppeteerConfigFile ~/.config/puppeteer/puppeteerConfig.json")

(org-babel-do-load-languages
    'org-babel-load-languages
    '((mermaid . t)
      (scheme . t)
      (html . t)
      (css . t)
      (nix . t)
      (python . t)
      (java . t)))


(with-eval-after-load "moom"
  ;; add settings here ...
  ;; (setq moom-use-font-module nil)
  (moom-mode 1))

(use-package! org-download
  :after org
  :config
;; Drag-and-drop to `dired`
  (add-hook 'dired-mode-hook 'org-download-enable)

;; snippet from Librephoenix
;; system-wm-type, wayland or x11? only should be considered if system-nix-profile is "personal" or "work"
;;(if (string= system-wm-type "wayland")
;;  (setq org-download-screenshot-method "grim -g \"$(slurp)\" %s")
;;  (setq org-download-screenshot-method "flameshot gui -p %s")

  (setq org-download-screenshot-method "screencapture -i %s"))
#+end_src



* Org LaTeX Export
#+begin_src emacs-lisp :tangle config.el
(with-eval-after-load 'ox-latex
  (add-to-list 'org-latex-classes
    '("org-plain-latex"
      "\\documentclass{article}
       [NO-DEFAULT-PACKAGES]
       [PACKAGES]
       [EXTRA]"
      ("\\section{%s}" . "\\section*{%s}")
      ("\\subsection{%s}" . "\\subsection*{%s}")
      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
      ("\\paragraph{%s}" . "\\paragraph*{%s}")
      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  ;; Compiler and PDF process settings
  (setq org-latex-compiler 'xelatex)
  (setq org-latex-pdf-process
        '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

  ;; Source code block backend
  (setq org-latex-src-block-backend 'listings))

  ;; Optional: Add more customization
;;  (setq org-latex-default-class "org-plain-latex"))
;; Hook to tidy latex process files when we close the buffer
(defun aff/tidy-latex-waste-products ()
  "Clean up possible latex intermediate files when closing an org file."
  (if (and (string-equal major-mode "org-mode")
           (stringp buffer-file-name)
           (file-exists-p (file-name-directory buffer-file-name))) ;; in case deleted
      (dolist (file (directory-files
                     (file-name-directory buffer-file-name)
                     t
                     (concat (regexp-quote (file-name-base
                                            buffer-file-name))
                             "\\(?:\\.[0-9]+\\)?"
                             "\\."
                             (regexp-opt (cons "tex" org-latex-logfiles-extensions)))))
        (delete-file file) ) ) )

(add-hook 'kill-buffer-hook 'aff/tidy-latex-waste-products)
#+end_src

* Input Method
#+begin_src emacs-lisp :tangle config.el
(setq default-input-method "german-postfix")
;;(setq org-image-actual-width nil)
(use-package! org-ros)
#+end_src

* Treemacs Configuration
#+begin_src emacs-lisp :tangle config.el
(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
    (progn
      (setq treemacs-buffer-name-function            #'treemacs-default-buffer-name
          treemacs-buffer-name-prefix              " *Treemacs-Buffer-"
          treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay        0.5
          treemacs-directory-name-transformer      #'identity
          treemacs-display-in-side-window          t
          treemacs-eldoc-display                   'simple
          treemacs-file-event-delay                2000
          treemacs-file-extension-regex            treemacs-last-period-regex-value
          treemacs-file-follow-delay               0.2
          treemacs-file-name-transformer           #'identity
          treemacs-follow-after-init               t
          treemacs-expand-after-init               t
          treemacs-find-workspace-method           'find-for-file-or-pick-first
          treemacs-git-command-pipe                ""
          treemacs-goto-tag-strategy               'refetch-index
          treemacs-header-scroll-indicators        '(nil . "^^^^^^")
          treemacs-hide-dot-git-directory          t
          treemacs-indentation                     2
          treemacs-indentation-string              " "
          treemacs-is-never-other-window           nil
          treemacs-max-git-entries                 5000
          treemacs-missing-project-action          'ask
          treemacs-move-files-by-mouse-dragging    t
          treemacs-move-forward-on-expand          nil
          treemacs-no-png-images                   nil
          treemacs-no-delete-other-windows         t
          treemacs-project-follow-cleanup          nil
          treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                        'left
          treemacs-read-string-input               'from-child-frame
          treemacs-recenter-distance               0.1
          treemacs-recenter-after-file-follow      nil
          treemacs-recenter-after-tag-follow       nil
          treemacs-recenter-after-project-jump     'always
          treemacs-recenter-after-project-expand   'on-distance
          treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
          treemacs-project-follow-into-home        nil
          treemacs-show-cursor                     nil
          treemacs-show-hidden-files               t
          treemacs-silent-filewatch                nil
          treemacs-silent-refresh                  nil
          treemacs-sorting                         'alphabetic-asc
          treemacs-select-when-already-in-treemacs 'move-back
          treemacs-space-between-root-nodes        t
          treemacs-tag-follow-cleanup              t
          treemacs-tag-follow-delay                1.5
          treemacs-text-scale                      nil
          treemacs-user-mode-line-format           nil
          treemacs-user-header-line-format         nil
          treemacs-wide-toggle-width               70
          treemacs-width                           35
          treemacs-width-increment                 1
          treemacs-width-is-initially-locked       t
          treemacs-workspace-switch-cleanup        nil)

      )
    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)
    (when treemacs-python-executable
      (treemacs-git-commit-diff-mode t))

    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))

    (treemacs-hide-gitignored-files-mode nil))
  :bind
    (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t d"   . treemacs-select-directory)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-evil :after (treemacs evil) :ensure t)
(use-package treemacs-projectile :after (treemacs projectile) :ensure t)
(use-package treemacs-icons-dired :hook (dired-mode . treemacs-icons-dired-enable-once) :ensure t)
(use-package treemacs-magit :after (treemacs magit) :ensure t)
(use-package treemacs-persp :after (treemacs persp-mode) :ensure t
  :config (treemacs-set-scope-type 'Perspectives))
(use-package treemacs-tab-bar :after (treemacs) :ensure t
  :config (treemacs-set-scope-type 'Tabs))

(treemacs-start-on-boot)
#+end_src



* org-present
#+begin_src emacs-lisp :tangle config.el
;;; Basic Appearance ---------------------------------------

;; More minimal UI
(setq inhibit-startup-screen t)
(setq menu-bar-mode 0)
(setq tool-bar-mode 0)
(setq scroll-bar-mode 0)

;; Let the desktop background show through
(set-frame-parameter (selected-frame) 'alpha '(97 . 100))
(add-to-list 'default-frame-alist '(alpha . (90 . 90)))

;;; Theme and Fonts ----------------------------------------

;; Load up doom-palenight for the System Crafters look
;;(load-theme 'doom-palenight t)

;; Set reusable font name variables
;;(defvar my/fixed-width-font "JetBrains Mono Nerd Font"
(defvar my/fixed-width-font "Terminess Mono Nerd Font"
  "The font to use for monospaced (fixed width) text.")

;;(defvar my/variable-width-font "Iosevka Aile"
(defvar my/variable-width-font "Latin Modern Sans"
  "The font to use for variable-pitch (document) text.")

;; NOTE: These settings might not be ideal for your machine, tweak them as needed!
(set-face-attribute 'default nil :font my/fixed-width-font :weight 'light :height 180)
(set-face-attribute 'fixed-pitch nil :font my/fixed-width-font :weight 'light :height 190)
(set-face-attribute 'variable-pitch nil :font my/variable-width-font :weight 'light :height 1.3)

;;; Org Mode Appearance ------------------------------------

;; Load org-faces to make sure we can set appropriate faces
(use-package! org-faces)

;; Hide emphasis markers on formatted text
(setq org-hide-emphasis-markers t)

;; Resize Org headings
(dolist (face '((org-level-1 . 1.2)
                (org-level-2 . 1.1)
                (org-level-3 . 1.05)
                (org-level-4 . 1.0)
                (org-level-5 . 1.1)
                (org-level-6 . 1.1)
                (org-level-7 . 1.1)
                (org-level-8 . 1.1)))
  (set-face-attribute (car face) nil :font my/variable-width-font :weight 'medium :height (cdr face)))

;; Make the document title a bit bigger
(set-face-attribute 'org-document-title nil :font my/variable-width-font :weight 'bold :height 1.3)

;; Make sure certain org faces use the fixed-pitch face when variable-pitch-mode is on
(set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
(set-face-attribute 'org-table nil :inherit 'fixed-pitch)
(set-face-attribute 'org-formula nil :inherit 'fixed-pitch)
(set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

;;; Centering Org Documents --------------------------------

;; Configure fill width
(setq visual-fill-column-width 110
      visual-fill-column-center-text t)

;;; Org Present --------------------------------------------

(defun my/org-present-prepare-slide (buffer-name heading)
  ;; Show only top-level headlines
  (org-overview)

  ;; Unfold the current entry
  (org-show-entry)

  ;; Show only direct subheadings of the slide but don't expand them
  (org-show-children))

(defun my/org-present-start ()
  ;; Tweak font sizes
  (setq-local face-remapping-alist '((default (:height 1.5) variable-pitch)
                                     (header-line (:height 4.0) variable-pitch)
                                     (org-document-title (:height 1.75) org-document-title)
                                     (org-code (:height 1.55) org-code)
                                     (org-verbatim (:height 1.55) org-verbatim)
                                     (org-block (:height 1.25) org-block)
                                     (org-block-begin-line (:height 0.7) org-block)))

  ;; Set a blank header line string to create blank space at the top
  (setq header-line-format " ")

  ;; Display inline images automatically
  (org-display-inline-images)

  ;; Center the presentation and wrap lines
  (visual-fill-column-mode 1)
  (visual-line-mode 1))

(defun my/org-present-end ()
  ;; Reset font customizations
  (setq-local face-remapping-alist '((default variable-pitch default)))

  ;; Clear the header line string so that it isn't displayed
  (setq header-line-format nil)

  ;; Stop displaying inline images
  (org-remove-inline-images)

  ;; Stop centering the document
  (visual-fill-column-mode 0)
  (visual-line-mode 0))

;; Turn on variable pitch fonts in Org Mode buffers
(add-hook 'org-mode-hook 'variable-pitch-mode)

;; Register hooks with org-present
(add-hook 'org-present-mode-hook 'my/org-present-start)
(add-hook 'org-present-mode-quit-hook 'my/org-present-end)
(add-hook 'org-present-after-navigate-functions 'my/org-present-prepare-slide)
#+end_src
