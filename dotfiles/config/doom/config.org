#+title: Doom Emacs Config

* UI Settings 
These need to be loaded first before the GUI starts
** Splash Image 
#+begin_src emacs-lisp :tangle config.el 
(setq fancy-splash-image 
(concat doom-private-dir "splash/doomEmacsDoomOne.svg")) 
#+end_src

** Transparency 
#+begin_src emacs-lisp :tangle config.el 
(set-frame-parameter (selected-frame) 'alpha-background 88) 
(add-to-list 'default-frame-alist '(alpha-background . 88)) 
(set-frame-parameter (selected-frame) 'alpha 88) 
(add-to-list 'default-frame-alist '(alpha . 88)) 
;; Troubleshooting: 
;;(set-face-background 'default 'unspecified) 
#+end_src

* Editor Settings
** Tabs
#+begin_src emacs-lisp :tangle config.el
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
(setq indent-line-function 'insert-tab)
#+end_src

* Org Mode Extensions
#+begin_src emacs-lisp :tangle config.el
(use-package! org-modern
  :config
  (add-hook 'org-mode-hook #'org-modern-mode)
  (add-hook 'org-mode-hook #'org-indent-mode))

(use-package! org-xournalpp
  :config
  (add-hook 'org-mode-hook #'org-xournalpp-mode))

(use-package! org-krita
  :config
  (add-hook 'org-mode-hook #'org-krita-mode))

(use-package! org-tree-slide
  :custom
  (org-image-actual-width nil))
#+end_src

* Org LaTeX Export
#+begin_src emacs-lisp :tangle config.el
(after! ox-latex
  (setq org-latex-compiler 'xelatex)
  (setq org-latex-pdf-process
        '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
  (setq org-latex-src-block-backend 'listings)) ;; alternative: 'minted
#+end_src

* Treemacs Configuration
#+begin_src emacs-lisp :tangle config.el
(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
    (progn
      (setq treemacs-buffer-name-function            #'treemacs-default-buffer-name
          treemacs-buffer-name-prefix              " *Treemacs-Buffer-"
          treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay        0.5
          treemacs-directory-name-transformer      #'identity
          treemacs-display-in-side-window          t
          treemacs-eldoc-display                   'simple
          treemacs-file-event-delay                2000
          treemacs-file-extension-regex            treemacs-last-period-regex-value
          treemacs-file-follow-delay               0.2
          treemacs-file-name-transformer           #'identity
          treemacs-follow-after-init               t
          treemacs-expand-after-init               t
          treemacs-find-workspace-method           'find-for-file-or-pick-first
          treemacs-git-command-pipe                ""
          treemacs-goto-tag-strategy               'refetch-index
          treemacs-header-scroll-indicators        '(nil . "^^^^^^")
          treemacs-hide-dot-git-directory          t
          treemacs-indentation                     2
          treemacs-indentation-string              " "
          treemacs-is-never-other-window           nil
          treemacs-max-git-entries                 5000
          treemacs-missing-project-action          'ask
          treemacs-move-files-by-mouse-dragging    t
          treemacs-move-forward-on-expand          nil
          treemacs-no-png-images                   nil
          treemacs-no-delete-other-windows         t
          treemacs-project-follow-cleanup          nil
          treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                        'left
          treemacs-read-string-input               'from-child-frame
          treemacs-recenter-distance               0.1
          treemacs-recenter-after-file-follow      nil
          treemacs-recenter-after-tag-follow       nil
          treemacs-recenter-after-project-jump     'always
          treemacs-recenter-after-project-expand   'on-distance
          treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
          treemacs-project-follow-into-home        nil
          treemacs-show-cursor                     nil
          treemacs-show-hidden-files               t
          treemacs-silent-filewatch                nil
          treemacs-silent-refresh                  nil
          treemacs-sorting                         'alphabetic-asc
          treemacs-select-when-already-in-treemacs 'move-back
          treemacs-space-between-root-nodes        t
          treemacs-tag-follow-cleanup              t
          treemacs-tag-follow-delay                1.5
          treemacs-text-scale                      nil
          treemacs-user-mode-line-format           nil
          treemacs-user-header-line-format         nil
          treemacs-wide-toggle-width               70
          treemacs-width                           35
          treemacs-width-increment                 1
          treemacs-width-is-initially-locked       t
          treemacs-workspace-switch-cleanup        nil)

      )
    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)
    (when treemacs-python-executable
      (treemacs-git-commit-diff-mode t))

    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))

    (treemacs-hide-gitignored-files-mode nil))
  :bind
    (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t d"   . treemacs-select-directory)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-evil :after (treemacs evil) :ensure t)
(use-package treemacs-projectile :after (treemacs projectile) :ensure t)
(use-package treemacs-icons-dired :hook (dired-mode . treemacs-icons-dired-enable-once) :ensure t)
(use-package treemacs-magit :after (treemacs magit) :ensure t)
(use-package treemacs-persp :after (treemacs persp-mode) :ensure t
  :config (treemacs-set-scope-type 'Perspectives))
(use-package treemacs-tab-bar :after (treemacs) :ensure t
  :config (treemacs-set-scope-type 'Tabs))

(treemacs-start-on-boot)
#+end_src

